/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect } from 'react'
import { useSpring } from '@react-spring/core'
import { useGLTF } from '@react-three/drei'
import { animated } from "@react-spring/three";
const Deg2Rad = 0.017453292519943295

function usePrevious(value) {
  const ref = useRef();
  useEffect(() => {
    ref.current = value;
  });
  return ref.current;
}

export default function Model({ colors, ...props }) {
  const group = useRef()
  // Rotate on change
  const [{ rotation }, setRotation] = useSpring(() => ({
    rotation: [(0 * Deg2Rad), (-45 * Deg2Rad), (-5 * Deg2Rad)],
    config: { mass: 0.5, tension: 2000, friction: 500, precision: 0.0001 }
  }))

  // Store previous color for transition
  const prev = usePrevious(colors)

  const [{
    lacesColor,
    meshColor,
    capsColor,
    innerColor,
    soleColor,
    stripesColor,
    bandColor,
    patchColor,
  }, set] = useSpring(() => ({
    lacesColor: prev ? prev.laces : colors.laces,
    meshColor: prev ? prev.mesh : colors.mesh,
    capsColor: prev ? prev.caps : colors.caps,
    innerColor: prev ? prev.inner : colors.inner,
    soleColor: prev ? prev.sole : colors.sole,
    stripesColor: prev ? prev.stripes : colors.stripes,
    bandColor: prev ? prev.band : colors.band,
    patchColor: prev ? prev.patch : colors.patch,
    config: { mass: 1, tension: 100, friction: 30, precision: 0.00001 }
  }))

  // On change color
  useEffect(() => {
    set({
      lacesColor: colors.laces,
      meshColor: colors.mesh,
      capsColor: colors.caps,
      innerColor: colors.inner,
      soleColor: colors.sole,
      stripesColor: colors.stripes,
      bandColor: colors.band,
      patchColor: colors.patch,
    })
    // Avoid initial transition
    if (prev && !colors.custom) {
      setRotation({rotation: [rotation.animation.to[0], rotation.animation.to[1] + (360 * Deg2Rad), rotation.animation.to[2]]})
    }
  }, [colors])

  const { nodes, materials } = useGLTF('/shoe.gltf')

  return (
    <animated.group {...props} ref={group} dispose={null} rotation={rotation}>
      <animated.mesh castShadow receiveShadow geometry={nodes.shoe.geometry} material={materials.laces} material-color={lacesColor} />
      <animated.mesh castShadow receiveShadow geometry={nodes.shoe_1.geometry} material={materials.mesh} material-color={meshColor} />
      <animated.mesh castShadow receiveShadow geometry={nodes.shoe_2.geometry} material={materials.caps} material-color={capsColor}  />
      <animated.mesh castShadow receiveShadow geometry={nodes.shoe_3.geometry} material={materials.inner} material-color={innerColor}  />
      <animated.mesh castShadow receiveShadow geometry={nodes.shoe_4.geometry} material={materials.sole} material-color={soleColor} />
      <animated.mesh castShadow receiveShadow geometry={nodes.shoe_5.geometry} material={materials.stripes} material-color={stripesColor} />
      <animated.mesh castShadow receiveShadow geometry={nodes.shoe_6.geometry} material={materials.band} material-color={bandColor}  />
      <animated.mesh castShadow receiveShadow geometry={nodes.shoe_7.geometry} material={materials.patch} material-color={patchColor} />
    </animated.group>
  )
}

useGLTF.preload('/shoe.gltf')
